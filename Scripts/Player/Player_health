using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System.Threading.Tasks;





public class PlayerHealth : MonoBehaviour, IHealth
{
    [SerializeField] private int maxHealth = 100;
    [SerializeField] private int maxShield = 50;

    private int currentHealth;
    private int currentShield;

    public float shieldRegenCooldown = 30f;
    public float shieldRegenRate = 2f;
    private float timeSinceLastDamage;

    public bool IsDead { get; private set; } = false;

    public int MaxHealth => maxHealth;
    public int CurrentHealth => currentHealth;

    // Лечение
    public int maxHColbs = 3; // Максимальное количество применений лечения
    private int remainingHColbs;
    public float healPercentage = 25f; // Процент восстановления здоровья от максимального
    public KeyCode healKey = KeyCode.H; // Кнопка для активации лечения
    public float healCooldown = 2f; // Задержка между активациями лечения
    private float hudUpdateDelay = 2f; // Задержка обновления HUD после лечения
    private bool canHeal = true;

    public Image healthFill; // Для визуального отображения здоровья
    public Image shieldFill; // Для визуального отображения щита
    public Text hColbsText; // Для отображения количества оставшихся лечений

    private Animator animator;

    private void Start()
    {
        currentHealth = maxHealth;
        currentShield = maxShield;
        remainingHColbs = maxHColbs;
        animator = GetComponent<Animator>();
        UpdateHUD();
    }

    private void Update()
    {
        if (IsDead) return;

        // Регенерация щита
        timeSinceLastDamage += Time.deltaTime;
        if (timeSinceLastDamage >= shieldRegenCooldown && currentShield < maxShield)
        {
            currentShield = Mathf.Min(currentShield + Mathf.CeilToInt(shieldRegenRate * Time.deltaTime), maxShield);
            UpdateHUD();
        }

        // Лечение
        if (Input.GetKeyDown(healKey) && canHeal && remainingHColbs > 0 && IsHealthBelowThreshold(85))
        {
            StartCoroutine(Heal());
        }
    }

    public void GetHit(int amount, GameObject sender)
    {
        if (IsDead) return;

        timeSinceLastDamage = 0f;

        if (currentShield > 0)
        {
            int remainingDamage = Mathf.Max(amount - currentShield, 0);
            currentShield = Mathf.Max(currentShield - amount, 0);
            currentHealth = Mathf.Max(currentHealth - remainingDamage, 0);
        }
        else
        {
            currentHealth = Mathf.Max(currentHealth - amount, 0);
        }

        UpdateHUD();

        if (currentHealth <= 0 && !IsDead)
        {
            Die();
        }
    }

    private IEnumerator Heal()
    {
        canHeal = false;
        remainingHColbs--;

        int healAmount = Mathf.CeilToInt(maxHealth * (healPercentage / 100));
        currentHealth = Mathf.Min(currentHealth + healAmount, maxHealth);

        // Запускаем анимацию лечения
        animator.SetTrigger("Heal");

        // Задержка перед обновлением HUD
        yield return new WaitForSeconds(hudUpdateDelay);
        UpdateHUD();

        // Устанавливаем кулдаун для лечения
        yield return new WaitForSeconds(healCooldown);
        canHeal = true;
    }

    private bool IsHealthBelowThreshold(int percentage)
    {
        return (float)currentHealth / maxHealth * 100 < percentage;
    }

    private void UpdateHUD()
    {
        if (healthFill != null)
        {
            healthFill.fillAmount = (float)currentHealth / maxHealth;
        }

        if (shieldFill != null)
        {
            shieldFill.fillAmount = (float)currentShield / maxShield;
        }

        if (hColbsText != null)
        {
            hColbsText.text = $"H-Colbs: {remainingHColbs}/{maxHColbs}";
        }
    }

    public void TakeDamage(int damage)
    {
        if (IsDead) return;

        if (currentShield > 0)
        {
            int remainingDamage = Mathf.Max(damage - currentShield, 0);
            currentShield = Mathf.Max(currentShield - damage, 0);
            currentHealth = Mathf.Max(currentHealth - remainingDamage, 0);
        }
        else
        {
            currentHealth = Mathf.Max(currentHealth - damage, 0);
        }

        Debug.Log($"Player took {damage} damage. Current health: {currentHealth}");
        UpdateHUD();

        if (currentHealth <= 0 && !IsDead)
        {
            Die();
        }
    }

    private void Die()
    {
        if (IsDead) return;

        IsDead = true;
        animator.SetTrigger("Death");

        // Отключаем управление
        if (TryGetComponent(out PlayerMovement movement)) movement.enabled = false;
        if (healthFill != null) healthFill.fillAmount = 0;
        if (shieldFill != null) shieldFill.fillAmount = 0;

        Debug.Log("Player is dead.");
    }

    public void Revive()
    {
        if (!IsDead) return;

        Debug.Log("Player revived!");
        IsDead = false;
        currentHealth = maxHealth;
        currentShield = maxShield;
        remainingHColbs = maxHColbs;
        UpdateHUD();

        animator.ResetTrigger("Death");
        animator.SetTrigger("Revive");
        if (TryGetComponent(out PlayerMovement movement)) movement.enabled = true;
    }

    public void UseHealthPotion(int amount)
    {
        if (IsDead) return;

        currentHealth = Mathf.Min(currentHealth + amount, maxHealth);
        UpdateHUD();
    }

    public void RestoreHealingColbs()
    {
        remainingHColbs = maxHColbs; // Восстанавливаем колбы
        Debug.Log("Healing colbs restored.");
    }

    public void UseShieldPotion(int amount)
    {
        if (IsDead) return;

        currentShield = Mathf.Min(currentShield + amount, maxShield);
        UpdateHUD();
    }
    public void RestoreHealth()
    {
        currentHealth = maxHealth; // Полное восстановление здоровья
        currentShield = maxShield; // Полное восстановление щита
        RestoreHealingColbs(); // Полное восстановление колб
        UpdateHUD(); // Обновление HUD
        Debug.Log("Health, shield, and healing colbs restored.");
    }

    // Новый метод для полного восстановления здоровья, щита и колб
    public void FullRestore()
    {
        currentHealth = maxHealth;
        currentShield = maxShield;
        remainingHColbs = maxHColbs;
        UpdateHUD(); // Обновляем HUD
    }
    public void SetHP(int newHP)
    {
        currentHealth = Mathf.Clamp(newHP, 0, maxHealth);
        UpdateHUD();
    }

    public void InvokeHUDUpdate()
    {
        UpdateHUD();
    }
}
